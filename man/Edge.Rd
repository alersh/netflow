% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Edge.R
\name{Edge}
\alias{Edge}
\title{R6 Class representing an edge}
\description{
Creates an Edge object
}
\details{
Specifies the connections between nodes
}
\section{Super class}{
\code{\link[ModelPath:Serializable]{ModelPath::Serializable}} -> \code{Edge}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{connected}}{Set the logical value for connected}

\item{\code{representation}}{Set the representation}

\item{\code{from_node}}{Get or set the id of the "from" node}

\item{\code{to_node}}{Get or set the id of the "to" node}

\item{\code{to_node_arg}}{Get or set the i"to" node argument}

\item{\code{nodes}}{Get the "from" and "to" nodes}

\item{\code{status_color}}{Get or set the status color}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Edge-new}{\code{Edge$new()}}
\item \href{#method-Edge-create_representation}{\code{Edge$create_representation()}}
\item \href{#method-Edge-is_connected}{\code{Edge$is_connected()}}
\item \href{#method-Edge-render}{\code{Edge$render()}}
\item \href{#method-Edge-set_connect}{\code{Edge$set_connect()}}
\item \href{#method-Edge-clone}{\code{Edge$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Serializable" data-id="serialize"><a href='../../ModelPath/html/Serializable.html#method-Serializable-serialize'><code>ModelPath::Serializable$serialize()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Serializable" data-id="unserialize"><a href='../../ModelPath/html/Serializable.html#method-Serializable-unserialize'><code>ModelPath::Serializable$unserialize()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Edge-new"></a>}}
\if{latex}{\out{\hypertarget{method-Edge-new}{}}}
\subsection{Method \code{new()}}{
Create an Edge object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Edge$new(representation, from_node, to_node, socket, default = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{representation}}{An edge representation, can be created using the
static method representation}

\item{\code{from_node}}{the id of the "from" node}

\item{\code{to_node}}{the id of the "to" node}

\item{\code{socket}}{Character the argument name of the "to" node function}

\item{\code{default}}{Logical. If TRUE, then no data fields are initialized.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An Edge object
create_representation
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Edge-create_representation"></a>}}
\if{latex}{\out{\hypertarget{method-Edge-create_representation}{}}}
\subsection{Method \code{create_representation()}}{
Create an edge representation
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Edge$create_representation(from_node, to_node)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{from_node}}{the id of the "from" node}

\item{\code{to_node}}{the id of the "to" node
is_connected}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Edge-is_connected"></a>}}
\if{latex}{\out{\hypertarget{method-Edge-is_connected}{}}}
\subsection{Method \code{is_connected()}}{
Check if the edge is connected
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Edge$is_connected()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
logical
render
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Edge-render"></a>}}
\if{latex}{\out{\hypertarget{method-Edge-render}{}}}
\subsection{Method \code{render()}}{
Create a visnetwork data frame for rendering the edges
set_connect
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Edge$render()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Edge-set_connect"></a>}}
\if{latex}{\out{\hypertarget{method-Edge-set_connect}{}}}
\subsection{Method \code{set_connect()}}{
Set the edge connection
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Edge$set_connect(value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{logical}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Edge-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Edge-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Edge$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
