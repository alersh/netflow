% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Network.R
\name{Network}
\alias{Network}
\title{R6 class representing Network}
\description{
Creates a new network
}
\details{
A network containing nodes and edges
}
\examples{

## ------------------------------------------------
## Method `Network$add_edge`
## ------------------------------------------------

make_data <- function(){ c(3,4,5,NA) }
u<-network_new() \%>\%
      node('data', style = node_style('Dataset'), fn = node_function(fn = 'make_data', lock = T)) \%>\%
      node('mean', style = node_style('Mean'), fn = node_function(fn = 'mean', args = 'x', na.rm = T))
}
\section{Super classes}{
\code{\link[ModelPath:Serializable]{ModelPath::Serializable}} -> \code{\link[ModelPath:Node]{ModelPath::Node}} -> \code{Network}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{structure}}{Return the network structure}

\item{\code{nodes}}{Get or set the nodes}

\item{\code{interrupt}}{Whether the network run has been interrupted.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Network-new}{\code{Network$new()}}
\item \href{#method-Network-ns}{\code{Network$ns()}}
\item \href{#method-Network-reset}{\code{Network$reset()}}
\item \href{#method-Network-clear_outputs}{\code{Network$clear_outputs()}}
\item \href{#method-Network-add_edge}{\code{Network$add_edge()}}
\item \href{#method-Network-remove_edge}{\code{Network$remove_edge()}}
\item \href{#method-Network-lock_all_nodes}{\code{Network$lock_all_nodes()}}
\item \href{#method-Network-add_node}{\code{Network$add_node()}}
\item \href{#method-Network-add_nodes}{\code{Network$add_nodes()}}
\item \href{#method-Network-remove_node}{\code{Network$remove_node()}}
\item \href{#method-Network-build}{\code{Network$build()}}
\item \href{#method-Network-build_graph}{\code{Network$build_graph()}}
\item \href{#method-Network-set_node_validity}{\code{Network$set_node_validity()}}
\item \href{#method-Network-run}{\code{Network$run()}}
\item \href{#method-Network-plot}{\code{Network$plot()}}
\item \href{#method-Network-summary}{\code{Network$summary()}}
\item \href{#method-Network-get_locked_nodes}{\code{Network$get_locked_nodes()}}
\item \href{#method-Network-clone}{\code{Network$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Serializable" data-id="serialize"><a href='../../ModelPath/html/Serializable.html#method-Serializable-serialize'><code>ModelPath::Serializable$serialize()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Serializable" data-id="unserialize"><a href='../../ModelPath/html/Serializable.html#method-Serializable-unserialize'><code>ModelPath::Serializable$unserialize()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="call"><a href='../../ModelPath/html/Node.html#method-Node-call'><code>ModelPath::Node$call()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="is_locked"><a href='../../ModelPath/html/Node.html#method-Node-is_locked'><code>ModelPath::Node$is_locked()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="lock_to_string"><a href='../../ModelPath/html/Node.html#method-Node-lock_to_string'><code>ModelPath::Node$lock_to_string()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="reset_status"><a href='../../ModelPath/html/Node.html#method-Node-reset_status'><code>ModelPath::Node$reset_status()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="server"><a href='../../ModelPath/html/Node.html#method-Node-server'><code>ModelPath::Node$server()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="set_lock"><a href='../../ModelPath/html/Node.html#method-Node-set_lock'><code>ModelPath::Node$set_lock()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="set_status"><a href='../../ModelPath/html/Node.html#method-Node-set_status'><code>ModelPath::Node$set_status()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="set_status_fail"><a href='../../ModelPath/html/Node.html#method-Node-set_status_fail'><code>ModelPath::Node$set_status_fail()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="set_status_idle"><a href='../../ModelPath/html/Node.html#method-Node-set_status_idle'><code>ModelPath::Node$set_status_idle()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="set_status_running"><a href='../../ModelPath/html/Node.html#method-Node-set_status_running'><code>ModelPath::Node$set_status_running()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="set_status_succeed"><a href='../../ModelPath/html/Node.html#method-Node-set_status_succeed'><code>ModelPath::Node$set_status_succeed()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="set_ui_editable"><a href='../../ModelPath/html/Node.html#method-Node-set_ui_editable'><code>ModelPath::Node$set_ui_editable()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="status_fail"><a href='../../ModelPath/html/Node.html#method-Node-status_fail'><code>ModelPath::Node$status_fail()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="status_idle"><a href='../../ModelPath/html/Node.html#method-Node-status_idle'><code>ModelPath::Node$status_idle()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="status_running"><a href='../../ModelPath/html/Node.html#method-Node-status_running'><code>ModelPath::Node$status_running()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="status_succeed"><a href='../../ModelPath/html/Node.html#method-Node-status_succeed'><code>ModelPath::Node$status_succeed()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="ui"><a href='../../ModelPath/html/Node.html#method-Node-ui'><code>ModelPath::Node$ui()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Network-new"></a>}}
\if{latex}{\out{\hypertarget{method-Network-new}{}}}
\subsection{Method \code{new()}}{
Create a new network
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Network$new(
  id = "",
  style = NULL,
  author = "",
  description = "",
  rankdir = "LR",
  default = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The id of the Network}

\item{\code{style}}{A Node_Style object}

\item{\code{author}}{Name of the creator of this network}

\item{\code{description}}{Description of this network}

\item{\code{rankdir}}{Direction of the graph; can be 'LR' (left-right) or 'TD' (top-down); default 'LR'}

\item{\code{default}}{Logical. If TRUE, then no data fields are initialized.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A Network object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Network-ns"></a>}}
\if{latex}{\out{\hypertarget{method-Network-ns}{}}}
\subsection{Method \code{ns()}}{
Get the network namespaced node id
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Network$ns(node_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{node_id}}{The id of the node}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The namespaced id
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Network-reset"></a>}}
\if{latex}{\out{\hypertarget{method-Network-reset}{}}}
\subsection{Method \code{reset()}}{
Reset the network by clearing all the outputs of all the
unlocked nodes. Locked nodes are not reset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Network$reset()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
network
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Network-clear_outputs"></a>}}
\if{latex}{\out{\hypertarget{method-Network-clear_outputs}{}}}
\subsection{Method \code{clear_outputs()}}{
Clears the outputs of all unlocked nodes
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Network$clear_outputs()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Network-add_edge"></a>}}
\if{latex}{\out{\hypertarget{method-Network-add_edge}{}}}
\subsection{Method \code{add_edge()}}{
Create an edge between two nodes
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Network$add_edge(representation, socket, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{representation}}{An Edge representation. A character string defined as 'from_node -> to_node'.}

\item{\code{socket}}{Character. The input argument where the 'from' node is plugged into}

\item{\code{...}}{Additional options that need to be pre-specified}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{make_data <- function(){ c(3,4,5,NA) }
u<-network_new() \%>\%
      node('data', style = node_style('Dataset'), fn = node_function(fn = 'make_data', lock = T)) \%>\%
      node('mean', style = node_style('Mean'), fn = node_function(fn = 'mean', args = 'x', na.rm = T))
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Network-remove_edge"></a>}}
\if{latex}{\out{\hypertarget{method-Network-remove_edge}{}}}
\subsection{Method \code{remove_edge()}}{
Remove an edge
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Network$remove_edge(representation, permanent = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{representation}}{Edge representation. A character string defined as 'from_node -> to_node'.}

\item{\code{permanent}}{Logical; if TRUE, then the edge is removed permanently. If false, the
edge between the two nodes can be rejoined using the function edge_restore}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Network-lock_all_nodes"></a>}}
\if{latex}{\out{\hypertarget{method-Network-lock_all_nodes}{}}}
\subsection{Method \code{lock_all_nodes()}}{
Lock all the nodes in the network
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Network$lock_all_nodes(value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{Logical Set it to TRUE locks all the nodes}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Network-add_node"></a>}}
\if{latex}{\out{\hypertarget{method-Network-add_node}{}}}
\subsection{Method \code{add_node()}}{
Add a node to the network
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Network$add_node(node)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{node}}{A Node object}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Network-add_nodes"></a>}}
\if{latex}{\out{\hypertarget{method-Network-add_nodes}{}}}
\subsection{Method \code{add_nodes()}}{
Add a node to the network
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Network$add_nodes(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Node objects}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Network-remove_node"></a>}}
\if{latex}{\out{\hypertarget{method-Network-remove_node}{}}}
\subsection{Method \code{remove_node()}}{
Remove a node from the network
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Network$remove_node(node_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{node_id}}{Character. The id of the node to be removed from the network.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Network-build"></a>}}
\if{latex}{\out{\hypertarget{method-Network-build}{}}}
\subsection{Method \code{build()}}{
Build the configuration of the network for display.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Network$build()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Network-build_graph"></a>}}
\if{latex}{\out{\hypertarget{method-Network-build_graph}{}}}
\subsection{Method \code{build_graph()}}{
Build the network graph that will be displayed
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Network$build_graph()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Network-set_node_validity"></a>}}
\if{latex}{\out{\hypertarget{method-Network-set_node_validity}{}}}
\subsection{Method \code{set_node_validity()}}{
A convenient method that sets the validity of the nodes
in the network. A node is valid if it has a function. Nodes that are valid
will not be locked, whereas nodes that are invalid will be locked. Locking
will also be performed as a side effect.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Network$set_node_validity()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Network-run"></a>}}
\if{latex}{\out{\hypertarget{method-Network-run}{}}}
\subsection{Method \code{run()}}{
Run the network by executing all the node operations sequentially
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Network$run(node_id = NA)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{node_id}}{Character. If the node_id is missing, then all the nodes will be run. Otherwise,
only the node of the node_id will be run.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Network-plot"></a>}}
\if{latex}{\out{\hypertarget{method-Network-plot}{}}}
\subsection{Method \code{plot()}}{
Display the network graphically
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Network$plot()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Network-summary"></a>}}
\if{latex}{\out{\hypertarget{method-Network-summary}{}}}
\subsection{Method \code{summary()}}{
summarize the network
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Network$summary()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
the summary of the network object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Network-get_locked_nodes"></a>}}
\if{latex}{\out{\hypertarget{method-Network-get_locked_nodes}{}}}
\subsection{Method \code{get_locked_nodes()}}{
Get all the locked nodes
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Network$get_locked_nodes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A vector of locked node ids
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Network-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Network-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Network$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
