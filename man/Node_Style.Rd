% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NodeStyle.R
\name{Node_Style}
\alias{Node_Style}
\title{R6 class representing Node_Style}
\description{
Creates a Node_Style object
}
\details{
Specifies the appearance of the nodes
}
\section{Super class}{
\code{\link[ModelPath:Serializable]{ModelPath::Serializable}} -> \code{Node_Style}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{label}}{initialize}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{shape}}{Get the shape of this node.}

\item{\code{type}}{Get or set the type of the node. Default 'regular'.}

\item{\code{lock}}{Set the shape of the node based on the lock status.}

\item{\code{group}}{Set the group of the node.}

\item{\code{status_color}}{Get the node color related to the node's status.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Node_Style-new}{\code{Node_Style$new()}}
\item \href{#method-Node_Style-invalidate}{\code{Node_Style$invalidate()}}
\item \href{#method-Node_Style-set_status}{\code{Node_Style$set_status()}}
\item \href{#method-Node_Style-render}{\code{Node_Style$render()}}
\item \href{#method-Node_Style-clone}{\code{Node_Style$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Serializable" data-id="serialize"><a href='../../ModelPath/html/Serializable.html#method-Serializable-serialize'><code>ModelPath::Serializable$serialize()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Serializable" data-id="unserialize"><a href='../../ModelPath/html/Serializable.html#method-Serializable-unserialize'><code>ModelPath::Serializable$unserialize()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node_Style-new"></a>}}
\if{latex}{\out{\hypertarget{method-Node_Style-new}{}}}
\subsection{Method \code{new()}}{
Create a new Node_Style object with a node label
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node_Style$new(label = "", default = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{label}}{the label of the node to be displayed}

\item{\code{default}}{Logical. If TRUE, then no data fields are initialized.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new Node_Style object
invalidate
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node_Style-invalidate"></a>}}
\if{latex}{\out{\hypertarget{method-Node_Style-invalidate}{}}}
\subsection{Method \code{invalidate()}}{
Set the invalid shape of the node
set_status
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node_Style$invalidate()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node_Style-set_status"></a>}}
\if{latex}{\out{\hypertarget{method-Node_Style-set_status}{}}}
\subsection{Method \code{set_status()}}{
Set the status color of the node.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node_Style$set_status(
  status = c("idle", "success", "running", "fail", "warning")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{status}}{Character. The status of the node. Can be 'idle', 'success', 'running',
'fail', and 'warning'
render}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node_Style-render"></a>}}
\if{latex}{\out{\hypertarget{method-Node_Style-render}{}}}
\subsection{Method \code{render()}}{
Render the nodes of a network
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node_Style$render(node_id, network_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{node_id}}{A vector of node ids.}

\item{\code{network_id}}{Character. The id of the network.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A data frame
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node_Style-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Node_Style-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node_Style$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
