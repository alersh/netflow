% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Netflow.R
\name{Netflow}
\alias{Netflow}
\title{R6 class representing a Netflow}
\description{
Creates a Netflow object
}
\details{
Netflow integrates and manages all the networks in the environment
}
\section{Super classes}{
\code{\link[ModelPath:Serializable]{ModelPath::Serializable}} -> \code{\link[ModelPath:Node]{ModelPath::Node}} -> \code{\link[ModelPath:Network]{ModelPath::Network}} -> \code{Netflow}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{network_ids}}{Get a vector of network ids.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Netflow-new}{\code{Netflow$new()}}
\item \href{#method-Netflow-add_network}{\code{Netflow$add_network()}}
\item \href{#method-Netflow-remove_network}{\code{Netflow$remove_network()}}
\item \href{#method-Netflow-reset}{\code{Netflow$reset()}}
\item \href{#method-Netflow-clear_outputs}{\code{Netflow$clear_outputs()}}
\item \href{#method-Netflow-lock_networks}{\code{Netflow$lock_networks()}}
\item \href{#method-Netflow-add_nodes}{\code{Netflow$add_nodes()}}
\item \href{#method-Netflow-add_node}{\code{Netflow$add_node()}}
\item \href{#method-Netflow-remove_node}{\code{Netflow$remove_node()}}
\item \href{#method-Netflow-set_node_validity}{\code{Netflow$set_node_validity()}}
\item \href{#method-Netflow-set_status}{\code{Netflow$set_status()}}
\item \href{#method-Netflow-run}{\code{Netflow$run()}}
\item \href{#method-Netflow-summary}{\code{Netflow$summary()}}
\item \href{#method-Netflow-get_locked_networks}{\code{Netflow$get_locked_networks()}}
\item \href{#method-Netflow-net_flow}{\code{Netflow$net_flow()}}
\item \href{#method-Netflow-print}{\code{Netflow$print()}}
\item \href{#method-Netflow-plot_node_update}{\code{Netflow$plot_node_update()}}
\item \href{#method-Netflow-plot_network_update}{\code{Netflow$plot_network_update()}}
\item \href{#method-Netflow-server}{\code{Netflow$server()}}
\item \href{#method-Netflow-call}{\code{Netflow$call()}}
\item \href{#method-Netflow-clone}{\code{Netflow$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Serializable" data-id="serialize"><a href='../../ModelPath/html/Serializable.html#method-Serializable-serialize'><code>ModelPath::Serializable$serialize()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Serializable" data-id="unserialize"><a href='../../ModelPath/html/Serializable.html#method-Serializable-unserialize'><code>ModelPath::Serializable$unserialize()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="is_locked"><a href='../../ModelPath/html/Node.html#method-Node-is_locked'><code>ModelPath::Node$is_locked()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="lock_to_string"><a href='../../ModelPath/html/Node.html#method-Node-lock_to_string'><code>ModelPath::Node$lock_to_string()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="reset_status"><a href='../../ModelPath/html/Node.html#method-Node-reset_status'><code>ModelPath::Node$reset_status()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="set_lock"><a href='../../ModelPath/html/Node.html#method-Node-set_lock'><code>ModelPath::Node$set_lock()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="set_status_fail"><a href='../../ModelPath/html/Node.html#method-Node-set_status_fail'><code>ModelPath::Node$set_status_fail()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="set_status_idle"><a href='../../ModelPath/html/Node.html#method-Node-set_status_idle'><code>ModelPath::Node$set_status_idle()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="set_status_running"><a href='../../ModelPath/html/Node.html#method-Node-set_status_running'><code>ModelPath::Node$set_status_running()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="set_status_succeed"><a href='../../ModelPath/html/Node.html#method-Node-set_status_succeed'><code>ModelPath::Node$set_status_succeed()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="set_ui_editable"><a href='../../ModelPath/html/Node.html#method-Node-set_ui_editable'><code>ModelPath::Node$set_ui_editable()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="status_fail"><a href='../../ModelPath/html/Node.html#method-Node-status_fail'><code>ModelPath::Node$status_fail()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="status_idle"><a href='../../ModelPath/html/Node.html#method-Node-status_idle'><code>ModelPath::Node$status_idle()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="status_running"><a href='../../ModelPath/html/Node.html#method-Node-status_running'><code>ModelPath::Node$status_running()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="status_succeed"><a href='../../ModelPath/html/Node.html#method-Node-status_succeed'><code>ModelPath::Node$status_succeed()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="ui"><a href='../../ModelPath/html/Node.html#method-Node-ui'><code>ModelPath::Node$ui()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Network" data-id="add_edge"><a href='../../ModelPath/html/Network.html#method-Network-add_edge'><code>ModelPath::Network$add_edge()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Network" data-id="build"><a href='../../ModelPath/html/Network.html#method-Network-build'><code>ModelPath::Network$build()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Network" data-id="build_graph"><a href='../../ModelPath/html/Network.html#method-Network-build_graph'><code>ModelPath::Network$build_graph()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Network" data-id="get_locked_nodes"><a href='../../ModelPath/html/Network.html#method-Network-get_locked_nodes'><code>ModelPath::Network$get_locked_nodes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Network" data-id="lock_all_nodes"><a href='../../ModelPath/html/Network.html#method-Network-lock_all_nodes'><code>ModelPath::Network$lock_all_nodes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Network" data-id="ns"><a href='../../ModelPath/html/Network.html#method-Network-ns'><code>ModelPath::Network$ns()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Network" data-id="plot"><a href='../../ModelPath/html/Network.html#method-Network-plot'><code>ModelPath::Network$plot()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Network" data-id="remove_edge"><a href='../../ModelPath/html/Network.html#method-Network-remove_edge'><code>ModelPath::Network$remove_edge()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Netflow-new"></a>}}
\if{latex}{\out{\hypertarget{method-Netflow-new}{}}}
\subsection{Method \code{new()}}{
Create a Netflow object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Netflow$new(id, author = "", description = "", rankdir = "LR")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The id of the Netflow}

\item{\code{author}}{The name of the creator of this network}

\item{\code{description}}{The description of this network}

\item{\code{rankdir}}{The direction of the graph; can be 'LR', 'TD'; default 'LR'}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An Netflow object
add_network
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Netflow-add_network"></a>}}
\if{latex}{\out{\hypertarget{method-Netflow-add_network}{}}}
\subsection{Method \code{add_network()}}{
Add a network
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Netflow$add_network(network)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{network}}{A Network object
remove_network}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Netflow-remove_network"></a>}}
\if{latex}{\out{\hypertarget{method-Netflow-remove_network}{}}}
\subsection{Method \code{remove_network()}}{
Remove a network
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Netflow$remove_network(network_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{network_id}}{Character. The network id to be removed
reset}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Netflow-reset"></a>}}
\if{latex}{\out{\hypertarget{method-Netflow-reset}{}}}
\subsection{Method \code{reset()}}{
Reset the networks by clearing all the outputs of all the
unlocked nodes. Locked nodes are not reset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Netflow$reset(network_ids)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{network_ids}}{A vector of characters of network ids.
clear_outputs}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Netflow-clear_outputs"></a>}}
\if{latex}{\out{\hypertarget{method-Netflow-clear_outputs}{}}}
\subsection{Method \code{clear_outputs()}}{
Helper function that clears the outputs of all unlocked networks
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Netflow$clear_outputs(network_ids)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{network_ids}}{A vector of characters of network ids.
lock_networks}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Netflow-lock_networks"></a>}}
\if{latex}{\out{\hypertarget{method-Netflow-lock_networks}{}}}
\subsection{Method \code{lock_networks()}}{
Lock all the nodes in the networks
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Netflow$lock_networks(network_ids, value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{network_ids}}{A vector of characters of network ids}

\item{\code{value}}{Logical. TRUE to lock the networks
add_nodes}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Netflow-add_nodes"></a>}}
\if{latex}{\out{\hypertarget{method-Netflow-add_nodes}{}}}
\subsection{Method \code{add_nodes()}}{
Add a series of nodes to a network
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Netflow$add_nodes(..., network_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Node objects}

\item{\code{network_id}}{Character. The network id.
add_node}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Netflow-add_node"></a>}}
\if{latex}{\out{\hypertarget{method-Netflow-add_node}{}}}
\subsection{Method \code{add_node()}}{
Add a node to the network
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Netflow$add_node(node, network_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{node}}{A Node object}

\item{\code{network_id}}{Character. The network id
remove_node}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Netflow-remove_node"></a>}}
\if{latex}{\out{\hypertarget{method-Netflow-remove_node}{}}}
\subsection{Method \code{remove_node()}}{
Remove a node from the network
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Netflow$remove_node(node_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{node_id}}{Character. The id of the node to be removed from the network
set_node_validity}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Netflow-set_node_validity"></a>}}
\if{latex}{\out{\hypertarget{method-Netflow-set_node_validity}{}}}
\subsection{Method \code{set_node_validity()}}{
A convenient function that sets the validity of the nodes
in the network. A node is valid if it has a function. Nodes that are valid
will not be locked, whereas nodes that are invalid will be locked. Locking
will also be performed as a side effect.
set_status
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Netflow$set_node_validity()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Netflow-set_status"></a>}}
\if{latex}{\out{\hypertarget{method-Netflow-set_status}{}}}
\subsection{Method \code{set_status()}}{
Get the current status of the network
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Netflow$set_status(value = c("idle", "running", "warning", "fail", "success"))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{Character. The status descriptor. Can be "idle", "running",
"warning", "fail", "success"
run}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Netflow-run"></a>}}
\if{latex}{\out{\hypertarget{method-Netflow-run}{}}}
\subsection{Method \code{run()}}{
Run the network by executing all the node operations sequentially
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Netflow$run(node_id = NA)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{node_id}}{Character. If it is NA, then all the nodes will be run. Otherwise, the specified
node will be be run.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Netflow-summary"></a>}}
\if{latex}{\out{\hypertarget{method-Netflow-summary}{}}}
\subsection{Method \code{summary()}}{
summarize the Netflow
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Netflow$summary()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
the summary of the network object
get_locked_networks
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Netflow-get_locked_networks"></a>}}
\if{latex}{\out{\hypertarget{method-Netflow-get_locked_networks}{}}}
\subsection{Method \code{get_locked_networks()}}{
Get all the locked networks
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Netflow$get_locked_networks()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A Vector of locked network ids
net_flow
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Netflow-net_flow"></a>}}
\if{latex}{\out{\hypertarget{method-Netflow-net_flow}{}}}
\subsection{Method \code{net_flow()}}{
Run the Netflow shiny gadget
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Netflow$net_flow()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Netflow-print"></a>}}
\if{latex}{\out{\hypertarget{method-Netflow-print}{}}}
\subsection{Method \code{print()}}{
Display the network graphically
plot_node_update
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Netflow$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Netflow-plot_node_update"></a>}}
\if{latex}{\out{\hypertarget{method-Netflow-plot_node_update}{}}}
\subsection{Method \code{plot_node_update()}}{
Update the plot of the node in visnetwork
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Netflow$plot_node_update(node_id, network_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{node_id}}{Character. the node id.}

\item{\code{network_id}}{Character. The network id.
plot_network_update}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Netflow-plot_network_update"></a>}}
\if{latex}{\out{\hypertarget{method-Netflow-plot_network_update}{}}}
\subsection{Method \code{plot_network_update()}}{
Update a network in the Netflow.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Netflow$plot_network_update(network_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{network_id}}{Character. The network id.
server}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Netflow-server"></a>}}
\if{latex}{\out{\hypertarget{method-Netflow-server}{}}}
\subsection{Method \code{server()}}{
the server
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Netflow$server(input, output, session)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the Shiny input}

\item{\code{output}}{the Shiny output}

\item{\code{session}}{the Shiny session
call}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Netflow-call"></a>}}
\if{latex}{\out{\hypertarget{method-Netflow-call}{}}}
\subsection{Method \code{call()}}{
call the module
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Netflow$call(input, output, session)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the Shiny input}

\item{\code{output}}{the Shiny output}

\item{\code{session}}{the Shiny session}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Netflow-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Netflow-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Netflow$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
