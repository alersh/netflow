% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Node.R
\name{Node}
\alias{Node}
\title{R6 Class representing a node}
\description{
A node is the basic unit of a network.
}
\details{
A node contains an ID, the name of the author, the description, and the display style
}
\section{Super class}{
\code{\link[ModelPath:Serializable]{ModelPath::Serializable}} -> \code{Node}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{id}}{Get or set the name that identifies this node}

\item{\code{network_id}}{Get or set the network_id this node belongs to}

\item{\code{description}}{Get or set the description of this node}

\item{\code{author}}{Get or set the name of the author}

\item{\code{lock}}{Lock or unlock this node}

\item{\code{style}}{Return the Node_Style object of this node}

\item{\code{status}}{Get the current status of the network}

\item{\code{error_message}}{Get the error message}

\item{\code{warning_message}}{Get the warning message}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Node-new}{\code{Node$new()}}
\item \href{#method-Node-lock_to_string}{\code{Node$lock_to_string()}}
\item \href{#method-Node-is_locked}{\code{Node$is_locked()}}
\item \href{#method-Node-set_lock}{\code{Node$set_lock()}}
\item \href{#method-Node-reset_status}{\code{Node$reset_status()}}
\item \href{#method-Node-set_status}{\code{Node$set_status()}}
\item \href{#method-Node-status_fail}{\code{Node$status_fail()}}
\item \href{#method-Node-status_running}{\code{Node$status_running()}}
\item \href{#method-Node-status_succeed}{\code{Node$status_succeed()}}
\item \href{#method-Node-status_idle}{\code{Node$status_idle()}}
\item \href{#method-Node-set_status_fail}{\code{Node$set_status_fail()}}
\item \href{#method-Node-set_status_running}{\code{Node$set_status_running()}}
\item \href{#method-Node-set_status_succeed}{\code{Node$set_status_succeed()}}
\item \href{#method-Node-set_status_idle}{\code{Node$set_status_idle()}}
\item \href{#method-Node-ui}{\code{Node$ui()}}
\item \href{#method-Node-server}{\code{Node$server()}}
\item \href{#method-Node-call}{\code{Node$call()}}
\item \href{#method-Node-set_ui_editable}{\code{Node$set_ui_editable()}}
\item \href{#method-Node-clone}{\code{Node$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Serializable" data-id="serialize"><a href='../../ModelPath/html/Serializable.html#method-Serializable-serialize'><code>ModelPath::Serializable$serialize()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ModelPath" data-topic="Serializable" data-id="unserialize"><a href='../../ModelPath/html/Serializable.html#method-Serializable-unserialize'><code>ModelPath::Serializable$unserialize()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node-new"></a>}}
\if{latex}{\out{\hypertarget{method-Node-new}{}}}
\subsection{Method \code{new()}}{
Create a node
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node$new(id, style = NULL, author = "", description = "", default = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{Character. The id name of this node}

\item{\code{style}}{A Node_Style object that specifies the appearance of the node}

\item{\code{author}}{Character. The name of the author.}

\item{\code{description}}{The description of this node.}

\item{\code{default}}{Logical. If TRUE, then no data fields are initialized.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the Node object
lock_to_string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node-lock_to_string"></a>}}
\if{latex}{\out{\hypertarget{method-Node-lock_to_string}{}}}
\subsection{Method \code{lock_to_string()}}{
Return 'lock' if the node is locked, 'unlock' otherwise
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node$lock_to_string()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{lock}}{A logical}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A Character string
is_locked
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node-is_locked"></a>}}
\if{latex}{\out{\hypertarget{method-Node-is_locked}{}}}
\subsection{Method \code{is_locked()}}{
Get the current state of the lock
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node$is_locked()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A logical. TRUE if it is locked; FALSE otherwise
set_lock
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node-set_lock"></a>}}
\if{latex}{\out{\hypertarget{method-Node-set_lock}{}}}
\subsection{Method \code{set_lock()}}{
Lock or unlock this node
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node$set_lock(value = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{logical, whether to lock or unlock; default to TRUE
reset_status}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node-reset_status"></a>}}
\if{latex}{\out{\hypertarget{method-Node-reset_status}{}}}
\subsection{Method \code{reset_status()}}{
Reset the status of the node to 'idle'. It will empty out
the error message and warning message.
set_status
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node$reset_status()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node-set_status"></a>}}
\if{latex}{\out{\hypertarget{method-Node-set_status}{}}}
\subsection{Method \code{set_status()}}{
Set the current status of the network
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node$set_status(value = c("idle", "running", "warning", "fail", "success"))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{Character. The status descriptor can be "idle", "running",
"warning", "fail", "success"
status_fail}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node-status_fail"></a>}}
\if{latex}{\out{\hypertarget{method-Node-status_fail}{}}}
\subsection{Method \code{status_fail()}}{
Check if the current status is a fail
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node$status_fail()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A logical
status_running
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node-status_running"></a>}}
\if{latex}{\out{\hypertarget{method-Node-status_running}{}}}
\subsection{Method \code{status_running()}}{
Check if the current status is running
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node$status_running()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A logical
status_succeed
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node-status_succeed"></a>}}
\if{latex}{\out{\hypertarget{method-Node-status_succeed}{}}}
\subsection{Method \code{status_succeed()}}{
Check if the current status is a success
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node$status_succeed()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A logical
status_idle
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node-status_idle"></a>}}
\if{latex}{\out{\hypertarget{method-Node-status_idle}{}}}
\subsection{Method \code{status_idle()}}{
Check if the current status is in idle
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node$status_idle()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A logical
set_status_fail
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node-set_status_fail"></a>}}
\if{latex}{\out{\hypertarget{method-Node-set_status_fail}{}}}
\subsection{Method \code{set_status_fail()}}{
Set the current status to fail
set_status_running
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node$set_status_fail()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node-set_status_running"></a>}}
\if{latex}{\out{\hypertarget{method-Node-set_status_running}{}}}
\subsection{Method \code{set_status_running()}}{
Set the current status to running
set_status_succeed
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node$set_status_running()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node-set_status_succeed"></a>}}
\if{latex}{\out{\hypertarget{method-Node-set_status_succeed}{}}}
\subsection{Method \code{set_status_succeed()}}{
Set the current status to success
set_status_idle
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node$set_status_succeed()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node-set_status_idle"></a>}}
\if{latex}{\out{\hypertarget{method-Node-set_status_idle}{}}}
\subsection{Method \code{set_status_idle()}}{
Set the current status to idle
ui
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node$set_status_idle()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node-ui"></a>}}
\if{latex}{\out{\hypertarget{method-Node-ui}{}}}
\subsection{Method \code{ui()}}{
UI
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node$ui(ns)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{ns}}{The parent's namespace}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node-server"></a>}}
\if{latex}{\out{\hypertarget{method-Node-server}{}}}
\subsection{Method \code{server()}}{
The node server
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node$server(input, output, session, ns)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{The shiny input}

\item{\code{output}}{The shiny output}

\item{\code{session}}{The shiny session}

\item{\code{ns}}{The parent's namespace
call}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node-call"></a>}}
\if{latex}{\out{\hypertarget{method-Node-call}{}}}
\subsection{Method \code{call()}}{
Call the module
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node$call(input, output, session)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{The shiny input}

\item{\code{output}}{The shiny output}

\item{\code{session}}{The shiny session}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node-set_ui_editable"></a>}}
\if{latex}{\out{\hypertarget{method-Node-set_ui_editable}{}}}
\subsection{Method \code{set_ui_editable()}}{
Set which uis are editable
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node$set_ui_editable(status = TRUE, description = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{status}}{Whether the "status" panel of the node is editable}

\item{\code{description}}{Whether the "description" panel of the node is editable}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Node-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Node-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Node$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
