% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Process_Node.R
\name{Process_Node}
\alias{Process_Node}
\title{R6 Class representing a node}
\description{
A process node contains a function that processes the output from another node
}
\details{
A Node with Function
}
\section{Super classes}{
\code{\link[ModelPath:Serializable]{ModelPath::Serializable}} -> \code{\link[ModelPath:Node]{ModelPath::Node}} -> \code{Process_Node}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{output}}{Get or set the output of this node
input_ids}

\item{\code{input_ids}}{Get or set input_ids
to_node}

\item{\code{to_node}}{Get or set to_node
to_node_arg}

\item{\code{to_node_arg}}{Get or set to_node_arg
fn}

\item{\code{fn}}{Return the function object of this node
visualization}

\item{\code{visualization}}{Get or set the custom visualization code}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Process_Node$new()}}
\item \href{#method-run}{\code{Process_Node$run()}}
\item \href{#method-set_validity}{\code{Process_Node$set_validity()}}
\item \href{#method-clear_output}{\code{Process_Node$clear_output()}}
\item \href{#method-reset}{\code{Process_Node$reset()}}
\item \href{#method-ui}{\code{Process_Node$ui()}}
\item \href{#method-server}{\code{Process_Node$server()}}
\item \href{#method-set_ui_editable}{\code{Process_Node$set_ui_editable()}}
\item \href{#method-clone}{\code{Process_Node$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="ModelPath" data-topic="Serializable" data-id="serialize">}\href{../../ModelPath/html/Serializable.html#method-serialize}{\code{ModelPath::Serializable$serialize()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ModelPath" data-topic="Serializable" data-id="unserialize">}\href{../../ModelPath/html/Serializable.html#method-unserialize}{\code{ModelPath::Serializable$unserialize()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="call">}\href{../../ModelPath/html/Node.html#method-call}{\code{ModelPath::Node$call()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="is_locked">}\href{../../ModelPath/html/Node.html#method-is_locked}{\code{ModelPath::Node$is_locked()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="lock_to_string">}\href{../../ModelPath/html/Node.html#method-lock_to_string}{\code{ModelPath::Node$lock_to_string()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="reset_status">}\href{../../ModelPath/html/Node.html#method-reset_status}{\code{ModelPath::Node$reset_status()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="set_lock">}\href{../../ModelPath/html/Node.html#method-set_lock}{\code{ModelPath::Node$set_lock()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="set_status">}\href{../../ModelPath/html/Node.html#method-set_status}{\code{ModelPath::Node$set_status()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="status_fail">}\href{../../ModelPath/html/Node.html#method-status_fail}{\code{ModelPath::Node$status_fail()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="status_idle">}\href{../../ModelPath/html/Node.html#method-status_idle}{\code{ModelPath::Node$status_idle()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="status_running">}\href{../../ModelPath/html/Node.html#method-status_running}{\code{ModelPath::Node$status_running()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ModelPath" data-topic="Node" data-id="status_succeed">}\href{../../ModelPath/html/Node.html#method-status_succeed}{\code{ModelPath::Node$status_succeed()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a node
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Process_Node$new(
  id = "",
  fn = NULL,
  style = NULL,
  visualization = NULL,
  author = "",
  description = "",
  default = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The id name of this node}

\item{\code{fn}}{The function the node uses to process data}

\item{\code{style}}{A Node_Style object that specifies the appearance of the node}

\item{\code{visualization}}{The written code that creates custom visuals.}

\item{\code{author}}{Character. The name of the author.}

\item{\code{description}}{The description of this node}

\item{\code{default}}{Logical. If TRUE, then no data fields are initialized.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A Process_Node object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-run"></a>}}
\if{latex}{\out{\hypertarget{method-run}{}}}
\subsection{Method \code{run()}}{
Run the function of this node
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Process_Node$run(output_list, argument)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{output_list}}{The list of outputs associated with the nodes}

\item{\code{argument}}{The vector of arguments which the outputs go to
set_validity}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_validity"></a>}}
\if{latex}{\out{\hypertarget{method-set_validity}{}}}
\subsection{Method \code{set_validity()}}{
Set the validity of the node. A node is considered valid
if it contains a function
clear_output
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Process_Node$set_validity()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clear_output"></a>}}
\if{latex}{\out{\hypertarget{method-clear_output}{}}}
\subsection{Method \code{clear_output()}}{
Clear the output of this node
reset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Process_Node$clear_output()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-reset"></a>}}
\if{latex}{\out{\hypertarget{method-reset}{}}}
\subsection{Method \code{reset()}}{
Reset the node's status and clear output
ui
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Process_Node$reset()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ui"></a>}}
\if{latex}{\out{\hypertarget{method-ui}{}}}
\subsection{Method \code{ui()}}{
Create the Shiny UI elements of the process node
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Process_Node$ui(ns)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{ns}}{The parent's namespace
server}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-server"></a>}}
\if{latex}{\out{\hypertarget{method-server}{}}}
\subsection{Method \code{server()}}{
Create the Shiny server
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Process_Node$server(input, output, session, ns)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{The Shiny input}

\item{\code{output}}{The Shiny output}

\item{\code{session}}{The Shiny session}

\item{\code{ns}}{The parent's namespace
set_ui_editable}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_ui_editable"></a>}}
\if{latex}{\out{\hypertarget{method-set_ui_editable}{}}}
\subsection{Method \code{set_ui_editable()}}{
Set which uis are editable. Only the status, function, and description
can be set
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Process_Node$set_ui_editable(status = TRUE, fun = TRUE, description = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{status}}{Logical whether the status can be edited}

\item{\code{fun}}{Logical whether the function can be edited}

\item{\code{description}}{Logical whether the description can be edited
output}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Process_Node$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
